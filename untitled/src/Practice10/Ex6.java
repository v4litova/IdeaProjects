package Practice10;
//Проверка числа на простоту
//Дано натуральное число n>1. Проверьте, является ли оно простым.
//Программа должна вывести слово YES, если число простое и NO, если число
//составное. Алгоритм должен иметь сложность O(logn).
//Указание. Понятно, что задача сама по себе нерекурсивна, т.к. проверка
//числа n на простоту никак не сводится к проверке на простоту меньших чисел.
//Поэтому нужно сделать еще один параметр рекурсии: делитель числа, и
//именно по этому параметру и делать рекурсию.
public class Ex6 {
    public static void main(String[] args) {
        int n = 997;

        if (isPrime(n, 2)) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    static boolean isPrime(int n, int divisor) {
        // Если число меньше или равно 1, то оно не является простым
        if (n <= 1) {
            return false;
        }
        // Если текущий делитель больше корня из n, то n является простым
        if (divisor * divisor > n) {
            return true;
        }
        // Если n делится нацело на текущий делитель, то оно не является простым
        if (n % divisor == 0) {
            return false;
        }
        // В противном случае, рекурсивно вызываем isPrime с увеличенным делителем
        return isPrime(n, divisor + 1);
    }
}
